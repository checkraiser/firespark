/** *	@service ContainerInitialize *	@desc Initializes a new Container * *	@param key string [memory] optional default 'ui-global' *	@param id long int [memory] optional default '0'  *	@param instance object [save] with 'key-id' ***/FireSpark.jquery.service.ContainerInitialize = {	input : function(){		return {			optional : { 				key : 'ui-global', 				id : '0' 			}		};	},		run : function($memory){		var $config = Snowblozm.Registry.get($memory['key']);		var $instance = $memory['key']+'-'+$memory['id'];		var $value = Snowblozm.Registry.get($instance) || {};				if($value['ui'] || 0){			$memory['valid'] = false;			return $memory;		} 		else {			$value['tilehead'] = $config['tilehead'];			$value['inline'] = $config['inline'];						switch($config['data']){				case 'global' :					$data = TileUI['global']['data'];					for(var $i in $data){						$value[$i] = $data[$i];					}					$value['data'] = true;					break;									case 'server' :					$value['expiry'] = $config['expiry'];					$value['data'] = $value['data'] || false;					break;									default :					break;			}						$admin = $value['message']['admin'] || false;			$tiles = $config['tiles'];			$value['tiles'] = [];						for(var $i in $tiles){				if($tiles[$i]['privileged'] & !$admin){					continue;				}				$value['tiles'].push($tiles[$i]);			}						$value['ui'] = true;		}				Snowblozm.Registry.save($instance, $value);		$memory['valid'] = true;		return $memory;	},		output : function(){		return [];	}};