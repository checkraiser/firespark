/** *	@workflow InterfaceLoad *	@desc Processes loading of UI using imports and keys * *	@param key string [memory] optional default 'people.person.info' *	@param id long int [memory] optional default '0' *	@param name string [memory] optional default '' *	@param inl boolean [memory] optional default false *	@param cntr string [memory] optional default false *	@param ins string [memory] optional default '0' *	@param nav string [memory] optional default false *	@param tile string [memory] optional false * *	@param url URL [memory] optional default FireSpark.smart.constant.defaulturl *	@param tpl string [memory] optional default 'tpl-default' * *	@param select boolean [memory] optional default true *	@param lcntr string [memory] optional default FireSpark.smart.constant.statusdiv *	@param ld string [memory] optional default FireSpark.core.constant.loadstatus *	@param anm string [memory] optional default 'fadein' ('fadein', 'fadeout', 'slidein', 'slideout') *	@param dur integer [memory] optional default 1000 *	@param dly integer [memory] optional default 0 *	@param act string [memory] optional default 'all' ('all', 'first', 'last', 'remove') *	@param bg boolean [memory] optional default false * *	@param frc boolean [memory] optional default FireSpark.smart.constant.poolforce *	@param glb boolean [memory] optional default false *	@param nch boolean [memory] optional default false *	@param exp integer [memory] optional default FireSpark.smart.constant.poolexpiry * *	@param iframe string [memory] optional default false *	@param agt string [memory] optional default root *	@param root element [memory] optional default false * *	@param data string [memory] optional default '' *	@param type string [memory] optional default 'json' *	@param req string [memory] optional default 'POST' *	@param workflow Workflow [memory] optional default [{ service : FireSpark.ui.service.ContainerRender }] *	@param errorflow Workflow [memory] optional default [{ service : FireSpark.jquery.service.ElementContent, ... }] *	@param params array [memory] optional default [] *	@param stop boolean [memory] optional default false *	@param config array [memory] optional default FireSpark.smart.constant.config *	@param navigator string [memory] optional default '' * *	@author Vibhaj Rajan <vibhaj8@gmail.com> ***/FireSpark.smart.workflow.InterfaceLoad = {	input : function(){		return {			optional : { 				key : FireSpark.smart.constant.defaultkey, 				id : '0',				name : false,				ins : '0',				cntr : false,				lcntr : FireSpark.smart.constant.statusdiv,				inl : false,				url : FireSpark.smart.constant.defaulturl,				nav : false,				tile : false,				glb : false,				nch : false,				exp : FireSpark.smart.constant.poolexpiry,				frc : FireSpark.smart.constant.poolforce,				iframe : false,				agt : false,				root : false,				bg : false,				select : true,				ld : FireSpark.smart.constant.loadstatus,				anm : 'fadein',				dur : 1000,				dly : 0,				act : 'first',				tpl : 'tpl-default' ,				data : '',				type : 'json',				req : 'POST',				workflow : [{ service : FireSpark.ui.service.ContainerRender }],				errorflow :  [{ 					service : FireSpark.ui.service.ElementContent,					args : ['lcntr'],					input : {						element : 'lcntr',						animation : 'anm', 						duration : 'dur',						delay : 'dly'					},					select : true,					act : 'all'				}],				params : [],				stop : false,				config : FireSpark.smart.constant.config,				navigator : ''			}		};	},		run : function($memory){		for(var $i=3; ; $i++){			if($memory[$i] || false){			} else break;		}		var $max = $i - 3;				var $config = $memory['config'];		var $data = '';		for($i=0; $i<$max; $i++){			$data += ('&' + $config[$i] + '=' + $memory[$i]);		}		$memory['data'] += $data;				$memory['key'] = $memory[$i] || $memory['key'];		$memory['id'] = $memory[$i+1] || $memory['id'];		$memory['name'] = $memory[$i+2] || $memory['name'] || $memory['id'];		//$memory['ins'] = $memory[$i+3] || $memory['ins'];				var $key = $memory['key'];		var $instance = $memory['key']+'-'+$memory['id'];		var $workflow = $memory['workflow'];				$memory['key'] = 'ui-' + $key.replace(/\./g, '-');		$memory['ins'] = $memory['cntr'] || FireSpark.smart.constant.tileuiprefix + $memory['ins'];		$memory['navigator'] = $memory['navigator'].replace(/bg\/true\//g, '');		$memory['navigator'] = $memory['navigator'].replace(/glb\/true\//g, '');				if($memory['nav']){			$workflow = $workflow.concat([{				service : FireSpark.core.service.LaunchNavigator,				data : [$memory['nav']],				launch : true,				nonstrict : true			}]);		}				return Snowblozm.Kernel.execute([{			service : FireSpark.ui.service.ElementContent,			input : {				element : 'lcntr' ,				animation : 'anm', 				duration : 'dur',				delay : 'dly',				data : 'ld'			},			act : 'all',			select : true		},{			service : FireSpark.smart.service.DataLoad,			url : FireSpark.smart.constant.importroot + $key + FireSpark.smart.constant.importext,			args : ['lcntr', 'act', 'dur', 'dly', 'anm', 'ld'],			request : 'GET',			data : true, 			type : 'json', 			process : false, 			mime : 'application/x-www-form-urlencoded',			params : [],			stop : false,			cache : true,			expiry : false,			workflow : [{				service : FireSpark.core.service.DataSelect,				params : { imports : 'imports', tpl : 'tpl' }			},{				service : FireSpark.smart.service.DataImport,				args : ['tpl', 'lcntr', 'act', 'dur', 'dly', 'anm', 'ld'],				workflow : [{					service : FireSpark.smart.service.DataLoad,					args : ['tpl', 'ins', 'act', 'dur', 'dly', 'anm', 'key', 'id', 'name', 'ins', 'inline', 'bg', 'tile'],					url : $memory['url'],					data : 'service=' + $key + '&id=' + $memory['id'] + '&name=' + $memory['name'] + '&navigator=' + $memory['navigator'] + '&' + $memory['data'], 					type : $memory['type'],					request : $memory['req'], 					errorflow : $memory['errorflow'],					global : $memory['glb'],					nocache : $memory['nch'],					expiry : $memory['exp'],					force : $memory['frc'],					iframe : $memory['iframe'],					agent : $memory['agt'],					root : $memory['root'],					act : $memory['act'],					dur : $memory['dur'],					dly : $memory['dly'],					anm : $memory['anm'],					bg : $memory['bg'] || $memory['nav'],					key : $memory['key'],					id : $memory['id'],					name : $memory['name'],					ins : $memory['ins'],					tile : $memory['tile'],					inline : $memory['inl'],					navigator : $memory['navigator'],					params : ($memory['params']).concat(['key', 'id', 'name', 'ins', 'inline', 'navigator']),					workflow : $workflow				}]			}]		}], $memory);	},		output : function(){		return [];	}};