/** *	@workflow InterfaceLoad *	@desc Processes loading of UI using imports and keys * *	@param key string [memory] optional default 'people.person.info' *	@param id long int [memory] optional default '0' *	@param name string [memory] optional default '' *	@param inl boolean [memory] optional default false *	@param cntr string [memory] optional default false *	@param ins string [memory] optional default '0' *	@param nav string [memory] optional default false * *	@param url URL [memory] optional default FireSpark.smart.constant.defaulturl *	@param tpl string [memory] optional default 'tpl-default' * *	@param select boolean [memory] optional default true *	@param lcntr string [memory] optional default FireSpark.smart.constant.statusdiv *	@param ld string [memory] optional default FireSpark.core.constant.loadstatus *	@param anm string [memory] optional default 'fadein' ('fadein', 'fadeout', 'slidein', 'slideout') *	@param dur integer [memory] optional default 1000 *	@param dly integer [memory] optional default 0 *	@param act string [memory] optional default 'all' ('all', 'first', 'last', 'remove') * *	@param frc boolean [memory] optional default FireSpark.smart.constant.poolforce *	@param cch boolean [memory] optional default false *	@param exp integer [memory] optional default FireSpark.smart.constant.poolexpiry * *	@param iframe string [memory] optional default false *	@param agt string [memory] optional default root *	@param root element [memory] optional default false * *	@param cnf boolean [memory] optional default false *	@param cnfmsg string [memory] optional default FireSpark.smart.constant.cnfmsg * *	@param sel string [memory] optional default false *	@param enc string [memory] optional default 'url' ('url', 'json') * *	@param data string [memory] optional default '' *	@param type string [memory] optional default 'json' *	@param req string [memory] optional default 'POST' *	@param workflow Workflow [memory] optional default [{ service : FireSpark.jquery.workflow.TemplateApply, ... }] *	@param errorflow Workflow [memory] optional default [{ service : FireSpark.jquery.service.ElementContent, ... }] *	@param params array [memory] optional default [] *	@param stop boolean [memory] optional default false * *	@param ln boolean [memory] optional default false *	@param status string [memory] optional default 'valid' *	@param message string [memory] optional default 'message' * *	@author Vibhaj Rajan <vibhaj8@gmail.com> ***/FireSpark.smart.workflow.InterfaceLoad = {	input : function(){		return {			optional : { 				key : FireSpark.smart.constant.defaultkey, 				id : '0',				name : '',				ins : '0',				cntr : false,				lcntr : FireSpark.smart.constant.statusdiv,				inl : false,				url : FireSpark.smart.constant.defaulturl,				nav : false,				cch : true,				exp : FireSpark.smart.constant.poolexpiry,				frc : FireSpark.smart.constant.poolforce,				iframe : false,				agt : false,				root : false,				select : true,				ld : FireSpark.smart.constant.loadstatus,				anm : 'fadein',				dur : 1000,				dly : 0,				act : 'all'				tpl : 'tpl-default' ,				cnf : false,				cnfmsg : FireSpark.smart.constant.cnfmsg,				sel : false,				enc : 'url',				data : '',				type : 'json',				req : 'POST',				workflow : false,				errorflow :  [{ 					service : FireSpark.ui.service.ElementContent,					input : {						element : 'lcntr' ,						animation : 'anm', 						duration : 'dur',						delay : 'dly',						action : 'act' 					},					select : true				}],				params : [],				stop : false,				ln : false,				status : 'valid',				message : 'message'			}		};	},		run : function($memory){		var $key = $memory['key'];		var $instance = $memory['key']+'-'+$memory['id'];				$memory['key'] = 'ui-' + $key.replace(/\./g, '-');		$memory['ins'] = $memory['cntr'] || FireSpark.smart.constant.tileuiprefix + $memory['ins'];				if($memory['workflow']){			$workflow = $memory['workflow'];		}		else {			$workflow = [{				service : FireSpark.ui.service.ElementContent,				input : {					element : $memory['lcntr'],					delay : $memory['dly']				},				animation : 'slideout', 				duration : 1500,				select : true			}];						if($memory['inl']){				// Todo			}			else {				$workflow.concat([{					service : FireSpark.jquery.service.ElementContent,					element : '.tls-' + $instance,					select : true,					action : 'remove'				},{					service : FireSpark.jquery.workflow.TemplateApply,					element : $memory['ins'] + '>.tiles',					select : true,					template : $memory['tpl'] + '-tls',					action : $memory['act'],					animation : $memory['anm'],					duration : $memory['dur'],					delay : $memory['dly']				}]);			}						$workflow.concat([{				service : FireSpark.jquery.service.ElementContent,				element : '.tlc-' + $instance,				select : true,				action : 'remove'			},{				service : FireSpark.jquery.workflow.TemplateApply,				element : $memory['ins'] + '>.bands',				select : true,				template : $memory['tpl'] + '-tcs',				animation : 'none',				action : $memory['act'],				delay : 0			}]);		}				return Snowblozm.Kernel.execute([{			service : FireSpark.ui.service.ElementContent,			input : {				element : 'lcntr' ,				animation : 'anm', 				duration : 'dur',				delay : 'dly',				action : 'act' 			},			select : true		},{			service : service : FireSpark.smart.service.DataLoad,			url : FireSpark.smart.constant.importroot + $key + FireSpark.smart.constant.importext,			request : 'GET',			data : '', 			type : 'json', 			process : false, 			mime : 'application/x-www-form-urlencoded',			params : [],			stop : false,			cache : true,			expiry : false,			workflow : [{				service : FireSpark.core.service.DataSelect,				params : { imports : 'imports' }			},{				service : FireSpark.smart.service.DataImport,				workflow : [{					service : service : FireSpark.smart.service.DataLoad,					url : $memory['url'],					data : 'service=' + $key + '&id=' + $memory['id'] + '&name=' + $memory['name'] + '&' + $memory['data'], 					type : $memory['type'],					request : $memory['req'], 					errorflow : $memory['errorflow'],					cache : $memory['cch'],					expiry : $memory['exp'],					force : $memory['frc'],					iframe : $memory['iframe'],					agent : $memory['agt'],					root : $memory['root'],					key : $memory['key'],					id : $memory['id'],					name : $memory['name'],					instance : $memory['ins'],					inline : $memory['inl'],					params : ['key', 'id', 'name', 'instance', 'inline'],					workflow : $workflow				}]			}]		}], $memory);	},		output : function(){		return [];	}};